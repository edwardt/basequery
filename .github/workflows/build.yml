#
# Copyright (c) 2014-present, The osquery authors
#
# This source code is licensed as defined by the LICENSE file found in the
# root directory of this source tree.
#
# SPDX-License-Identifier: (Apache-2.0 OR GPL-2.0-only)
#

# Due to a limitation in how GitHub Actions works, we can't reference
# jobs in another file inside the `needs` statement.
#
# This configuration file takes care of the Linux builds on the x86 platform.
name: build

on:
  push:
    branches:
      - 'master'

    tags:
      - '**'

  pull_request:
    branches:
      - '*'

# If the initial code sanity checks are passing, then one job
# per [`platform` * `build_type`] will start, building osquery
# and generating packages that are later attached to the commit
# (or PR) as build artifacts.
jobs:
  # This job performs basic source code check, looking for formatting
  # issues and missing copyright headers
  check_code_style:
    runs-on: ubuntu-18.04

    container:
      image: osquery/builder18.04:0aa3775ce
      options: --privileged --init -v /var/run/docker.sock:/var/run/docker.sock

    steps:

    # We are using checkout@v1 because the checkout@v2 action downloads
    # the source code without cloning if the installed git is < v2.18.
    # Once we update the image we will also be able to select the clone
    # destination; right now we are moving the .git folder manually.
    - name: Clone the osquery repository
      uses: actions/checkout@v1

    # This script makes sure that the copyright headers have been correctly
    # placed on all the source code files
    - name: Check the copyright headers
      run: |
        ./tools/ci/scripts/check_copyright_headers.py

    - name: Setup the build paths
      shell: bash
      id: build_paths
      run: |
        rel_build_path="workspace/build"
        rel_source_path="workspace/src"

        mkdir -p "${rel_build_path}"
        ln -sf "$(pwd)" "${rel_source_path}"

        echo ::set-output name=SOURCE::$(realpath ${rel_source_path})
        echo ::set-output name=BINARY::$(realpath ${rel_build_path})

    - name: Configure the project
      working-directory: ${{ steps.build_paths.outputs.BINARY }}
      run: |
        cmake -G "Unix Makefiles" \
          -DOSQUERY_TOOLCHAIN_SYSROOT:PATH="/usr/local/osquery-toolchain" \
          -DOSQUERY_ENABLE_FORMAT_ONLY=ON \
          "${{ steps.build_paths.outputs.SOURCE }}"

    # Formatting is tested against the clang-format binary we ship
    # with the osquery-toolchain, so this job is only performed once on
    # a Linux machine.
    - name: Check code formatting
      working-directory: ${{ steps.build_paths.outputs.BINARY }}
      run:
        cmake --build . --target format_check




  # This job runs source code analysis tools (currently, just cppcheck)
  check_source_code:
    needs: check_code_style

    runs-on: ${{ matrix.os }}

    container:
      image: osquery/builder18.04:0aa3775ce
      options: --privileged --init -v /var/run/docker.sock:/var/run/docker.sock

    strategy:
      matrix:
        os: [ubuntu-18.04]

    steps:
    - name: Clone the osquery repository
      uses: actions/checkout@v1

    - name: Setup the build paths
      shell: bash
      id: build_paths
      run: |
        rel_build_path="workspace/build"
        rel_source_path="workspace/src"

        mkdir -p ${rel_build_path} \
                 ${rel_source_path}

        mv .git "${rel_source_path}"
        ( cd "${rel_source_path}" && git reset --hard )

        echo ::set-output name=SOURCE::$(realpath ${rel_source_path})
        echo ::set-output name=BINARY::$(realpath ${rel_build_path})
        echo ::set-output name=REL_BINARY::${rel_build_path}

    - name: Update the cache (git submodules)
      uses: actions/cache@v2
      with:
        path: ${{ steps.build_paths.outputs.SOURCE }}/.git/modules

        key: |
          gitmodules_${{ matrix.os }}_${{ github.sha }}

        restore-keys: |
          gitmodules_${{ matrix.os }}

    - name: Update the git submodules
      working-directory: ${{ steps.build_paths.outputs.SOURCE }}
      run: |
        git submodule sync --recursive

    - name: Configure the project (Release)
      working-directory: ${{ steps.build_paths.outputs.BINARY }}

      run: |
        cmake -G "Unix Makefiles" \
          -DOSQUERY_TOOLCHAIN_SYSROOT:PATH="/usr/local/osquery-toolchain" \
          -DCMAKE_BUILD_TYPE:STRING=Release \
          -DOSQUERY_BUILD_TESTS=ON \
          -DOSQUERY_BUILD_ROOT_TESTS=ON \
          "${{ steps.build_paths.outputs.SOURCE }}"

    - name: Initialize the project (Release)
      working-directory: ${{ steps.build_paths.outputs.BINARY }}
      run: |
        cmake --build . --target prepare_for_ide

    - name: Run cppcheck (Release)
      shell: bash
      id: release_cppcheck_runner
      working-directory: ${{ steps.build_paths.outputs.BINARY }}
      run: |
        cmake --build . --target cppcheck 2>&1 | tee cppcheck_release.txt




  # The Linux build will only start once we know that the code
  # has been properly formatted
  build_linux:
    needs: check_code_style

    runs-on: ${{ matrix.os }}

    container:
      image: osquery/builder18.04:0aa3775ce
      options: --privileged --init -v /var/run/docker.sock:/var/run/docker.sock

    strategy:
      matrix:
        build_type: [Release, RelWithDebInfo, Debug]
        os: [ubuntu-18.04]

    steps:
    - name: Clone the osquery repository
      uses: actions/checkout@v1

    - name: Select the build job count
      shell: bash
      id: build_job_count
      run: |
        echo ::set-output name=VALUE::$(($(nproc) + 1))

    - name: Select the build options for the tests
      shell: bash
      id: tests_build_settings
      run: |
        if [[ "${{ matrix.build_type }}" == "RelWithDebInfo" ]] ; then
          echo ::set-output name=VALUE::OFF
        else
          echo ::set-output name=VALUE::ON
        fi

    # We don't have enough space on the worker to actually generate all
    # the debug symbols (osquery + dependencies), so we have a flag to
    # disable them when running a Debug build
    - name: Select the debug symbols options
      shell: bash
      id: debug_symbols_settings
      run: |
        if [[ "${{ matrix.build_type }}" == "Debug" ]] ; then
          echo ::set-output name=VALUE::ON
        else
          echo ::set-output name=VALUE::OFF
        fi

    # When we spawn in the container, we are root; create an unprivileged
    # user now so that we can later use it to launch the normal user tests
    - name: Create a non-root user
      if: matrix.build_type != 'RelWithDebInfo'
      id: unprivileged_user
      run: |
        useradd -m -s /bin/bash unprivileged_user
        echo ::set-output name=NAME::unprivileged_user

    # Due to how the RPM packaging tools work, we have to adhere to some
    # character count requirements in the build path vs source path.
    #
    # Failing to do so, will break the debuginfo RPM package.
    - name: Setup the build paths
      id: build_paths
      run: |
        rel_build_path="workspace/usr/src/debug/osquery/build"
        rel_src_path="workspace/padding-required-by-rpm-packages/src"
        rel_ccache_path="workspace/ccache"

        mkdir -p ${rel_build_path} \
                 ${rel_src_path} \
                 ${rel_ccache_path} \
                 ${rel_src_path}

        chown -R ${{ steps.unprivileged_user.outputs.NAME }}:${{ steps.unprivileged_user.outputs.NAME }} .

        mv .git "${rel_src_path}"
        ( cd "${rel_src_path}" && git reset --hard )

        echo ::set-output name=SOURCE::$(realpath ${rel_src_path})
        echo ::set-output name=BINARY::$(realpath ${rel_build_path})
        echo ::set-output name=REL_BINARY::${rel_build_path}
        echo ::set-output name=CCACHE::$(realpath ${rel_ccache_path})

    # One of the tests in the test suit will spawn a Docker container
    # using this socket. Allow the unprivileged user we created
    # to access it.
    - name: Update the Docker socket permissions
      if: matrix.build_type != 'RelWithDebInfo'
      run: |
        chmod 666 /var/run/docker.sock

    - name: Update the cache (ccache)
      uses: actions/cache@v2
      with:
        path: ${{ steps.build_paths.outputs.CCACHE }}

        key: |
          ccache_${{ matrix.os }}_${{ matrix.build_type }}_${{ github.sha }}

        restore-keys: |
          ccache_${{ matrix.os }}_${{ matrix.build_type }}

    - name: Update the cache (git submodules)
      uses: actions/cache@v2
      with:
        path: ${{ steps.build_paths.outputs.SOURCE }}/.git/modules

        key: |
          gitmodules_${{ matrix.os }}_${{ github.sha }}

        restore-keys: |
          gitmodules_${{ matrix.os }}

    - name: Update the git submodules
      working-directory: ${{ steps.build_paths.outputs.SOURCE }}
      run: |
        git submodule sync --recursive

    - name: Configure the project
      working-directory: ${{ steps.build_paths.outputs.BINARY }}

      env:
        CCACHE_DIR: ${{ steps.build_paths.outputs.CCACHE }}

      run: |
        cmake -G "Unix Makefiles" \
          -DOSQUERY_NO_DEBUG_SYMBOLS=${{ steps.debug_symbols_settings.outputs.VALUE }} \
          -DOSQUERY_TOOLCHAIN_SYSROOT:PATH="/usr/local/osquery-toolchain" \
          -DCMAKE_BUILD_TYPE:STRING="${{ matrix.build_type }}" \
          -DOSQUERY_BUILD_TESTS=${{ steps.tests_build_settings.outputs.VALUE }} \
          -DOSQUERY_BUILD_ROOT_TESTS=${{ steps.tests_build_settings.outputs.VALUE }} \
          "${{ steps.build_paths.outputs.SOURCE }}"

    - name: Build the project
      working-directory: ${{ steps.build_paths.outputs.BINARY }}

      env:
        CCACHE_DIR: ${{ steps.build_paths.outputs.CCACHE }}

      run: |
        cmake --build . -j ${{ steps.build_job_count.outputs.VALUE }}

    # Only run the tests on Debug and Release configurations; skip RelWithDebInfo
    - name: Run the tests as normal user
      working-directory: ${{ steps.build_paths.outputs.BINARY }}
      if: matrix.build_type != 'RelWithDebInfo'
      run: |
        sudo -u ${{ steps.unprivileged_user.outputs.NAME }} ctest --build-nocmake -LE "root-required" -V

    - name: Run the tests as root user
      working-directory: ${{ steps.build_paths.outputs.BINARY }}
      if: matrix.build_type != 'RelWithDebInfo'
      run: |
        sudo -u root ctest --build-nocmake -L "root-required" -V

    - name: Create the DEB package
      if: matrix.build_type == 'RelWithDebInfo'
      working-directory: ${{ steps.build_paths.outputs.BINARY }}

      env:
        CCACHE_DIR: ${{ steps.build_paths.outputs.CCACHE }}

      run: |
        cmake -DPACKAGING_SYSTEM=DEB "${{ steps.build_paths.outputs.SOURCE }}"
        cmake --build . --target package -j ${{ steps.build_job_count.outputs.VALUE }}

    - name: Create the RPM package
      if: matrix.build_type == 'RelWithDebInfo'

      env:
        CCACHE_DIR: ${{ steps.build_paths.outputs.CCACHE }}

      working-directory: ${{ steps.build_paths.outputs.BINARY }}
      run: |
        cmake -DPACKAGING_SYSTEM=RPM "${{ steps.build_paths.outputs.SOURCE }}"
        cmake --build . --target package -j ${{ steps.build_job_count.outputs.VALUE }}

    - name: Create the TGZ package
      if: matrix.build_type == 'RelWithDebInfo'
      working-directory: ${{ steps.build_paths.outputs.BINARY }}

      env:
        CCACHE_DIR: ${{ steps.build_paths.outputs.CCACHE }}

      run: |
        cmake -DPACKAGING_SYSTEM=TGZ "${{ steps.build_paths.outputs.SOURCE }}"
        cmake --build . --target package -j ${{ steps.build_job_count.outputs.VALUE }}

    - name: Locate the packages
      if: matrix.build_type == 'RelWithDebInfo'
      working-directory: ${{ steps.build_paths.outputs.BINARY }}
      id: package_names
      shell: bash
      run: |
        echo ::set-output name=DEB_PACKAGE_NAME::$(ls *.deb)
        echo ::set-output name=DDEB_PACKAGE_NAME::$(ls *.ddeb)
        echo ::set-output name=RELEASE_RPM_PACKAGE_NAME::$(ls basequery-?.*.rpm)
        echo ::set-output name=DEBUGINFO_RPM_PACKAGE_NAME::$(ls basequery-debuginfo-*.rpm)
        echo ::set-output name=TARGZ_PACKAGE_NAME::$(ls *.tar.gz)

    - name: Store the .deb package artifact
      if: matrix.build_type == 'RelWithDebInfo'
      uses: actions/upload-artifact@v1
      with:
        name: linux_deb_package-${{ matrix.build_type }}
        path: ${{ steps.build_paths.outputs.REL_BINARY }}/${{ steps.package_names.outputs.DEB_PACKAGE_NAME }}

    - name: Store the .ddeb package artifact
      if: matrix.build_type == 'RelWithDebInfo'
      uses: actions/upload-artifact@v1
      with:
        name: linux_dbgsym_deb_package-${{ matrix.build_type }}
        path: ${{ steps.build_paths.outputs.REL_BINARY }}/${{ steps.package_names.outputs.DDEB_PACKAGE_NAME }}

    - name: Store the release .rpm package artifact
      if: matrix.build_type == 'RelWithDebInfo'
      uses: actions/upload-artifact@v1
      with:
        name: linux_rpm_package-${{ matrix.build_type }}
        path: ${{ steps.build_paths.outputs.REL_BINARY }}/${{ steps.package_names.outputs.RELEASE_RPM_PACKAGE_NAME }}

    - name: Store the debuginfo .rpm package artifact
      if: matrix.build_type == 'RelWithDebInfo'
      uses: actions/upload-artifact@v1
      with:
        name: linux_debuginfo_rpm_package-${{ matrix.build_type }}
        path: ${{ steps.build_paths.outputs.REL_BINARY }}/${{ steps.package_names.outputs.DEBUGINFO_RPM_PACKAGE_NAME }}

    - name: Store the .tar.gz package artifact
      if: matrix.build_type == 'RelWithDebInfo'
      uses: actions/upload-artifact@v1
      with:
        name: linux_targz_package-${{ matrix.build_type }}
        path: ${{ steps.build_paths.outputs.REL_BINARY }}/${{ steps.package_names.outputs.TARGZ_PACKAGE_NAME }}

    # Before we terminate this job, delete the build folder. The cache
    # actions will require the disk space to create the archives.
    - name: Reclaim disk space
      run: |
        rm -rf ${{ steps.build_paths.outputs.BINARY }}
